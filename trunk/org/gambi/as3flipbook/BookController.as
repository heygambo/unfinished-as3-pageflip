package org.gambi.as3flipbook{	import away3d.containers.View3D;	import away3d.core.math.Number3D;	import away3d.core.render.Renderer;	import away3d.events.MouseEvent3D;	import away3d.materials.BitmapMaterial;	import away3d.materials.ColorMaterial;	import away3d.materials.Material;	import away3d.materials.TransformBitmapMaterial;	import away3d.primitives.Trident;		import com.greensock.*;	import com.greensock.easing.*;		import flash.display.BitmapData;	import flash.display.Sprite;	import flash.display.StageAlign;	import flash.display.StageQuality;	import flash.display.StageScaleMode;	import flash.events.Event;	import flash.events.TimerEvent;	import flash.utils.Timer;
		public class BookController extends Sprite	{		private var _view:View3D;		private var _renderTimer:Timer = new Timer(30);		private var _sheetWidth:uint;		private var _sheetHeight:uint;		private var _bitmapData:Array;		private var _bookModel:BookModel = new BookModel();				public function BookController( init:Object ):void		{			super();			_sheetWidth = init.sheetWidth;			_sheetHeight = init.sheetHeight;			_bitmapData = init.bitmapData;						this.addEventListener(Event.ADDED_TO_STAGE, onAddedToStage, false, 0, true);		}				public function skimTo(sheet:int):Boolean		{			if (_bookModel.skimTo(sheet))			{				this.dispatchEvent(new BookEvent(BookEvent.BOOK_SKIM, _bookModel.currentSheetIndex));								var i:uint;				for(i = 0; i < _bookModel.sheets.length; i++)				{					if (i < sheet)					{						(_bookModel.sheets[i] as SheetController).animateToLeft();					}					else					{						(_bookModel.sheets[i] as SheetController).animateToRight();					}				}				correctZIndex();				return true;			}			return false;		}				public function skimToNext():Boolean		{			if (_bookModel.skimToNext())			{				this.dispatchEvent(new BookEvent(BookEvent.BOOK_SKIM, _bookModel.currentSheetIndex-1));				(_bookModel.sheets[_bookModel.currentSheetIndex-1] as SheetController).animateToLeft();				correctZIndex();				return true;			}			return false;		}				public function skimToPrev():Boolean		{			if (_bookModel.skimToPrev())			{				this.dispatchEvent(new BookEvent(BookEvent.BOOK_SKIM, _bookModel.currentSheetIndex));				(_bookModel.sheets[_bookModel.currentSheetIndex] as SheetController).animateToRight();				correctZIndex();				return true;			}			return false;		}				private function onAddedToStage( event:Event ):void		{			this.removeEventListener(Event.ADDED_TO_STAGE, onAddedToStage);			stage.addEventListener(Event.RESIZE, onResize, false, 0, true);						initEngine();			initObjects();						onResize(null);			_renderTimer.addEventListener(TimerEvent.TIMER, render, false, 0, true);			_renderTimer.start();		}				private function initEngine():void		{			_view = new View3D({renderer: Renderer.BASIC});			_view.camera.zoom = 6;			_view.camera.focus = 200;			_view.camera.lookAt(new Number3D(0,0,0));			this.addChild(_view);		}				private function initObjects():void		{			// The Plane			var i:uint, frontMaterial:Material, backMaterial:Material, sheet:SheetController;						for (i = 0; i < _bitmapData.length; i += 2)			{				frontMaterial = new BitmapMaterial( _bitmapData[i] );				if (_bitmapData[i+1])				{					backMaterial = new TransformBitmapMaterial( _bitmapData[i+1], { scaleX: -1, offsetX: _sheetWidth } );				}				else				{					backMaterial = new ColorMaterial(0xFF0000);				}								sheet = new SheetController({					width: _sheetWidth,					height: _sheetHeight,					segments: 10,					bothsides: true,					material: frontMaterial,					back: backMaterial,					sheetIndex: i/2				});				sheet.addEventListener(SheetEvent.SHEET_CLICK, onSheetClick, false, 0, true);								_bookModel.addSheet(sheet);				_view.scene.addChild(sheet.view);			}			correctZIndex();						// Das Hilfsdreieck			//_view.scene.addChild(new Trident(150, true));			this.dispatchEvent(new BookEvent(BookEvent.BOOK_COMPLETE, _bookModel.currentSheetIndex));		}				private function onSheetClick( event:SheetEvent ):void		{			var clickedSheet:SheetController = event.target as SheetController;						// Determining if the click was on the left or the right page			switch( clickedSheet )			{				case _bookModel.currentLeftSheet:					this.skimToPrev();										break;								case _bookModel.currentRightSheet:					this.skimToNext();					break;			}		}				private function correctZIndex():void		{			var i:uint;			for (i = 0; i < _bookModel.sheets.length; i++)			{				(_bookModel.sheets[i] as SheetController).view.z = 1;			}						if (_bookModel.previousSheet != null)			{				_bookModel.previousSheet.view.z = 0;			}						if (_bookModel.nextSheet != null)			{				_bookModel.nextSheet.view.z = 0;			}						if (_bookModel.currentLeftSheet != null)			{				_bookModel.currentLeftSheet.view.z = -1;			}						if (_bookModel.currentRightSheet != null)			{				_bookModel.currentRightSheet.view.z = -1;			}		}				private function render(event:TimerEvent):void		{			_view.render();		}				private function onResize(event:Event):void {			_view.x = stage.stageWidth / 2;			_view.y = stage.stageHeight / 2;		}	}}